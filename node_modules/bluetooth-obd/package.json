{
  "name": "bluetooth-obd",
  "version": "0.2.2",
  "description": "Package for communicating with a bluetooth OBD-II reader",
  "author": {
    "name": "Eric Smekens",
    "email": "ericsmekens@msn.com",
    "url": "http://github.com/EricSmekens"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com:EricSmekens/node-bluetooth-obd.git"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/obd.js",
  "dependencies": {
    "bluetooth-serial-port": ">=1.2.4"
  },
  "devDependencies": {},
  "engines": {
    "node": ">= 0.8.x",
    "npm": ">= 1.1.x"
  },
  "scripts": {
    "install": ""
  },
  "keywords": [
    "obd",
    "car",
    "bluetooth",
    "rfcomm",
    "ecu"
  ],
  "license": "Apache-2.0",
  "readme": "[![NPM](https://nodei.co/npm/bluetooth-obd.png?downloads=true&stars=true)](https://nodei.co/npm/bluetooth-obd/)\r\n\r\nbluetooth-obd - 0.2.2\r\n===============\r\n\r\n# Bluetooth communication for OBD-II ELM327 devices.\r\nThis node module lets you communicate over a bluetooth serial port with OBD-II ELM327 Connectors using Node.js.\r\n# Limitations\r\n* Only tested on ELM327 devices.\r\n* Not all OBD-II Commands are implemented yet.\r\n\r\n# Pre-Requirements\r\n* If it's a Bluetooth ELM327, then it should already be paired! If this hasn't been done, it will cause a connection error.\r\n* bluetooth-serial-port (module that is used by this module, thanks to Eelco) requires libbluetooth-dev package:\r\n** $ sudo apt-get install libbluetooth-dev\r\n\r\n# Serial\r\n* If you're looking for serial RS23 connection, look into serial-obd.\r\n\r\n# Install\r\n`npm install bluetooth-obd`\r\n\r\n# Documentation\r\n\r\n## Basic usage\r\n\r\n```javascript\r\nvar OBDReader = require('bluetooth-obd');\r\nvar btOBDReader = new OBDReader();\r\nvar dataReceivedMarker = {};\r\n\r\nbtOBDReader.on('connected', function () {\r\n    //this.requestValueByName(\"vss\"); //vss = vehicle speed sensor\r\n\r\n    this.addPoller(\"vss\");\r\n    this.addPoller(\"rpm\");\r\n    this.addPoller(\"temp\");\r\n    this.addPoller(\"load_pct\");\r\n    this.addPoller(\"map\");\r\n    this.addPoller(\"frp\");\r\n\r\n    this.startPolling(1000); //Request all values each second.\r\n});\r\n\r\nbtOBDReader.on('dataReceived', function (data) {\r\n    console.log(data);\r\n    dataReceivedMarker = data;\r\n});\r\n\r\n// Use first device with 'obd' in the name\r\nbtOBDReader.autoconnect('obd');\r\n```\r\n## API\r\n\r\n###OBDReader\r\n\r\n#### Event: ('dataReceived', data)\r\n\r\nEmitted when data is read from the OBD-II connector.\r\n\r\n* data - the data that was read and parsed to a reply object\r\n\r\n#### Event: ('connected')\r\n\r\nEmitted when the connection is set up (port is open).\r\n\r\n#### Event: ('error', message)\r\n\r\nEmitted when an error is encountered.\r\n\r\n#### Event: ('debug', message)\r\n\r\nEmitted with debugging information.\r\n\r\n#### OBDReader()\r\n\r\nCreates an instance of OBDReader.\r\n\r\n#### getPIDByName(Name)\r\n\r\nFind a PID-value by name.\r\n\r\n##### Params: \r\n\r\n* **name** *Name* of the PID you want the hexadecimal (in ASCII text) value of.\r\n\r\n##### Return:\r\n\r\n* **string** PID in hexadecimal ASCII\r\n\r\n#### parseOBDCommand(hexString)\r\n\r\nParses a hexadecimal string to a reply object. Uses PIDS. (obdInfo.js)\r\n\r\n##### Params: \r\n\r\n* **string** *hexString* Hexadecimal value in string that is received over the serialport.\r\n\r\n##### Return:\r\n\r\n* **Object** reply - The reply.\r\n* **string** reply.value - The value that is already converted. This can be a PID converted answer or &quot;OK&quot; or &quot;NO DATA&quot;.\r\n* **string** reply.name - The name. --! Only if the reply is a PID.\r\n* **string** reply.mode - The mode of the PID. --! Only if the reply is a PID.\r\n* **string** reply.pid - The PID. --! Only if the reply is a PID.\r\n\r\n#### autoconnect(query)\r\n\r\nAttempt discovery of the device based on a query string, and call connect() on the first match.\r\n\r\n##### Params:\r\n\r\n * **string** *query* (Optional) string to be matched against address/channel (fuzzy-ish)\r\n\r\n#### connect(address, channel)\r\n\r\nConnect/Open the serial port and add events to serialport. Also starts the intervalWriter that is used to write the queue.\r\n\r\n##### Params:\r\n\r\n * **string** *address* MAC-address of device that will be connected to.\r\n * **number** *channel* Channel that the serial port service runs on.\r\n\r\n#### disconnect()\r\n\r\nDisconnects/closes the port.\r\n\r\n#### write(message, replies)\r\n\r\nWrites a message to the port. (Queued!) All write functions call this function.\r\n\r\n##### Params: \r\n\r\n* **string** *message* The PID or AT Command you want to send. Without \\r or \\n!\r\n* **number** *replies* The number of replies that are expected. Default = 0. 0 --> infinite\r\n\r\n#### requestValueByName(name)\r\n\r\nWrites a PID value by entering a pid supported name.\r\n\r\n##### Params: \r\n\r\n* **string** *name* Look into obdInfo.js for all PIDS.\r\n\r\n#### addPoller(name)\r\n\r\nAdds a poller to the poller-array.\r\n\r\n##### Params: \r\n\r\n* **string** *name* Name of the poller you want to add.\r\n\r\n#### removePoller(name)\r\n\r\nRemoves an poller.\r\n\r\n##### Params: \r\n\r\n* **string** *name* Name of the poller you want to remove.\r\n\r\n#### removeAllPollers()\r\n\r\nRemoves all pollers.\r\n\r\n#### writePollers()\r\n\r\nWrites all active pollers.\r\n\r\n#### startPolling()\r\n\r\nStarts polling. Lower interval than activePollers * 50 will probably give buffer overflows.\r\n\r\n##### Params:\r\n\r\n* **number** *interval* Frequency how often all variables should be polled. (in ms) If no value is given, then for each activePoller 75ms will be added.\r\n\r\n#### stopPolling()\r\n\r\nStops polling.\r\n\r\n# LICENSE\r\n\r\nThis module is available under a [Apache 2.0 license](http://www.apache.org/licenses/LICENSE-2.0.html), see also the [LICENSE file](https://raw.github.com/EricSmekens/node-bluetooth-obd/master/LICENSE) for details.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/EricSmekens/node-bluetooth-obd/issues"
  },
  "_id": "bluetooth-obd@0.2.2",
  "_from": "bluetooth-obd@^0.2.2"
}
